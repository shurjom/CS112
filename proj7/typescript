Script started on Tue 05 Apr 2016 10:26:21 PM EDT
sm47@boole:~/workspace/cs112/proj7$ ls
anorexia.txt	 ReversePoem.h		StackException.h  tester.cpp
cats.txt	 ReversePoemTester.cpp	Stack.h		  typescript
Debug		 ReversePoemTester.h	StackTester.cpp
ReversePoem.cpp  Stack.cpp		StackTester.h
sm47@boole:~/workspace/cs112/proj7$ cat ReversePooem   em.cpp ReversePoem.h ReversePoe mTester.cpp ReversePoemTester.h Stack.h cpp StackException.h Stack.h StackTester.c pp StackTester.h tester.cpp
/*ReversePoem.cpp provides (dynamic-array-based) ReversePoem methods
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Shurjo Maitra
 * Date:3.31.16
 */

#include "ReversePoem.h"
using namespace std;

/*ReversePoem() empty constructor
 */
ReversePoem::ReversePoem() {
}

/*ReversePoem() constructor when a file is used as input
 *@param: fileName from which data is extracted
 *PostCondition: info on title, author, etc
 */
ReversePoem::ReversePoem(const string &file) {
	ifstream svar(file.c_str());
	string x;
	getline(svar, x);
	myTitle = x;
	getline(svar, x);
	myAuthor = x;
	getline(svar, x);
	Stack<string> myStack(1);
	while (!svar.eof()) {
		getline(svar, x);
		if (x != "") {
			try {
				myStack.push(x);
			} catch (StackException& se) {
				myStack.setCapacity(myStack.getCapacity() * 2);
				myStack.push(x);
			}
			myBody += x += "\n";
		}
	}
	while (!myStack.isEmpty()) {
		myRevBody += myStack.pop() += "\n";
	}
}

/*getTitle() method
 *Return: myTitle
 */
string ReversePoem::getTitle() {
	return myTitle;
}

/*getAuthor() method
 *Return: myAuthor
 */
string ReversePoem::getAuthor() {
	return myAuthor;
}

/*getBody() method
 *Return: myBody
 */
string ReversePoem::getBody() {
	return myBody;
}

/*getBodyReversed() method
 *Return: myRevBody
 */
string ReversePoem::getBodyReversed() {
	return myRevBody;
}
/*ReversePoem.h provides a (dynamic-stack-based) ReversePoem class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Shurjo Maitra
 * Date:3.31.16
 *
 * Invariant: myTop == 0 && isEmpty() && !isFull()
 *         || myTop == myCapacity && !isEmpty() && isFull()
 *         || myTop > 0 && myTop < myCapacity && !isEmpty() && !isFull().
 * Notes:
 * 1. Member myTop always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or getTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef REVERSEPOEM_H_
#define REVERSEPOEM_H_

#include <string>
#include <iostream>
#include<iostream>
#include <fstream>
#include <ostream>
#include <istream>
#include <iostream>
#include <stdexcept>
#include <cassert>
#include <stdlib.h>
#include "Stack.h"

using namespace std;

typedef string Item;

class ReversePoem {
public:
	ReversePoem();
	ReversePoem(const string &filen);
	string getTitle();
	string getAuthor();
	string getBody();
	string getBodyReversed();

private:
string myFile;
string myTitle;
string myAuthor;
string myBody;
string myRevBody;
};

#endif /* REVERSEPOEM_H_ */
/*
 * ReversePoemTester.cpp defines test-methods for the ReversePoem class
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Shurjo Maitra
 * Date:3.31.16
 */

#include "ReversePoemTester.h"
#include "Stack.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
#include <stdexcept>
using namespace std;

void ReversePoemTester::runTests() {
	cout << "Testing ReversePoem class..." << endl;
	testEmptyConstructor();
	testFileConstructor();
	testGetTitle();
	testGetBody();
	testgetBodyReversed();
}

void ReversePoemTester::testEmptyConstructor() {
	cout << "- Testing empty constructor()... " << flush;
	// invalid parameter
//		try {
//			Stack<double> s1(0);
//			cerr << ";
//			exit(1);
//		} catch (StackException& se) {

//		cout << "\nConstructed stack of size 0" << flush;
	cout << " 0 " << flush;
	// valid parameter
	Stack<double> s2(3);
	cout << " 1 " << flush;
	cout << " Passed!" << endl;
}
/*Todo: coming up with and writing test cases.
 *
 */
void ReversePoemTester::testFileConstructor() {
	cout << "- Testing File constructor()... " << flush;
	cout << " 0 " << flush;
	cout << " 1 " << flush;
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

/*Todo: coming up with and writing test cases.
 *
 */
void ReversePoemTester::testGetTitle() {
	cout << "- Testing getTitle constructor()... " << flush;
	cout << " 0 " << flush;
	cout << " 1 " << flush;
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

/*Todo: coming up with and writing test cases.
 *
 */
void ReversePoemTester::testGetBody() {
	cout << "- Testing getBody constructor()... " << flush;
	cout << " 0 " << flush;
	cout << " 1 " << flush;
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

/*Todo: coming up with and writing test cases.
 *
 */
void ReversePoemTester::testgetBodyReversed() {
	cout << "- Testing getBodyReversed constructor()... " << flush;
	cout << " 0 " << flush;
	cout << " 1 " << flush;
	cout << " 2 " << flush;
	cout << " 3a " << flush;
	cout << " 3b " << flush;
	cout << " Passed!" << endl;
}
/*
 * ReversePoemTester.h declares test-class for ReversePoem class
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Shurjo Maitra
 * Date:3.31.16
 */

#ifndef REVERSEPOEMTESTER_H_
#define REVERSEPOEMTESTER_H_

class ReversePoemTester {
public:
	void runTests();
	void testEmptyConstructor();
	void testFileConstructor();
	void testGetTitle();
	void testGetBody();
	void testgetBodyReversed();
};




#endif /* REVERSEPOEMTESTER_H_ */
/* Stack.cpp defines the dynamically allocated (array-based ) Stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Shurjo Maitra
 * Date: 3.31.16
 */

#include "Stack.h"

/* StackException.h models exceptions in stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Shurjo Maitra
 * Date:3.29.16
 */

#ifndef STACK_EXCEPTION
#define STACK_EXCEPTION

#include <iostream>
using namespace std;

 
class StackException {
public:
   StackException(const string& whereThrown,
                  const string& message) { 
       myLocation = whereThrown; 
       myMessage = message; 
   }

   string asString() const {
       return "*** StackException in " +
               myLocation + ": " + myMessage; 
   }

private:
   string myLocation;
   string myMessage;
};  // StackException


/* Function to allow a StackException (or a subclass) to be displayed
 * via an ostream.
 * Parameters: out, an ostream;
 *             se, a StackException.
 * Postcondition: the string representation of se has been inserted
 * into out
 *             && return-value == out.
 */
inline ostream& operator<<(ostream& out, const StackException& se) {
      out << se.asString();
      return out;
}

#endif

/* Stack.h provides a (dynamic-array-based) Stack class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Shurjo Maitra
 * Date:3.31.16
 * 
 * Invariant: myTop == 0 && isEmpty() && !isFull()
 *         || myTop == myCapacity && !isEmpty() && isFull()
 *         || myTop > 0 && myTop < myCapacity && !isEmpty() && !isFull().
 * Notes: 
 * 1. Member myTop always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or getTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef STACK_H_
#define STACK_H_

#include "StackException.h"
#include <string>
#include <iostream>
#include <stdexcept>
#include <fstream>
#include <cassert>
using namespace std;
//typedef string Item;
template<class Item>


class Stack {
public:
	Stack(unsigned size);
	Stack(const Stack& original);
	~Stack();
	Stack& operator=(const Stack& original);
	bool isEmpty();
	void push(const Item& it);
	bool isFull();
	Item getTop() const;
	Item pop();
	unsigned getSize();
	unsigned getCapacity();
	void setCapacity(int newCapacity);

	
protected:
	void makeCopyOf(const Stack& original);
	
private:
	unsigned myCapacity;
	unsigned myTop;
	Item*    myArray;
	friend class StackTester;
};



/* explicit-value constructor
 * Parameter: size, an unsigned value.
 * Precondition: size > 0.
 * Postcondition: myTop == 0 && myCapacity == size
 *              && myArray contains the address of a dynamic array of 'size' entries.
 */
template<class Item>
Stack<Item>::Stack(unsigned size) {
	if (size > 0) {
		myTop = 0;
		myCapacity = size;
		myArray = new Item[size];
	} else {
		throw StackException("Stack(size):", "size must be positive!.");
	}
}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template<class Item>
Stack<Item>::Stack(const Stack& original) {
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template<class Item>
void Stack<Item>::makeCopyOf(const Stack& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	myTop = original.myTop;
}

/* destructor
 * Postcondition: myCapacity == 0 && myTop == 0
 *             && myArray has been deallocated.
 */
template<class Item>
Stack<Item>::~Stack() {
	delete[] myArray;
	myArray = NULL;
	myCapacity = 0;
	myTop = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
template<class Item>
Stack<Item>& Stack<Item>::operator=(const Stack& original) {
	if (this != &original) {
		delete[] myArray;
		makeCopyOf(original);
	}
	return *this;
}

/*isEmpty operator
 * Parameter: stack
 * Postcondition: whether or not I am empty
 */
template<class Item>
bool Stack<Item>::isEmpty() {
	if (myTop == 0) {
		return true;
	} else {
		return false;
	}
}

/*push operator
 *Parameter: an Item
 *PostCondition: a stack with a new item if there is space
 */
template<class Item>
void Stack<Item>::push(const Item& it) {
	if (myTop == myCapacity) {
		throw StackException("push()", "stack is full");
	} else {
		for (unsigned i = 0; i < myCapacity; i++) {
			myArray[myTop] = it;
		}
		myTop += 1;
	}
}
/*isFull operator
 * Parameter: stack
 * Postcondition: whether or not I am empty
 */
template<class Item>
bool Stack<Item>::isFull() {
	if (myTop == myCapacity) {
		return true;
	}
}
/*getTop operator
 * Parameter: a stack
 * Postcondition: value of the item on the top most on stack
 */
template<class Item>
Item Stack<Item>::getTop() const {
	if (myTop > 0) {
		return myArray[myTop - 1];
	} else {
		throw StackException("getTop()", "stack is empty");
	}
}

/* pop operator
 * Parameter: index
 * Postcondition: stack with the item at index myTop removed
 */
template<class Item>
Item Stack<Item>::pop() {
	if (isEmpty() == true) {
		throw StackException("pop()", " pop(): stack is empty!");
	} else {
		myTop -= 1;
		return myArray[myTop];
	}

}

/*getSize() method to obtain size of stack
 *@param: myTop
 *Postcondition: value of myTop stored as size
 */
template<class Item>
unsigned Stack<Item>::getSize() {
	return myTop;
}

/*getCapacity() method to obtain capacity of stack
 *@param: myCapacity
 *Postcondition: value of myCapacity stored as the capacity of stack
 */
template<class Item>
unsigned Stack<Item>::getCapacity() {
	return  myCapacity;
}
/*setCapacity() method to set the capacity of stack
 *@param: newCapacity
 *Postcondition: stack with new capacity from input, or error(if size > capacity)
 */

template<class Item>
void Stack<Item>::setCapacity(int nc) {
	if (nc < myTop) {
		throw StackException("setCapacity()", "New capacity cannot be smaller than myCapacity!");
	}
	Item * x = new Item[nc];
	for (unsigned i = 0; i<myTop; i++) {
		x[i] = myArray[i];
	}

	unsigned real = nc;
	delete [] myArray;
	myCapacity = real;
	myArray = x;
}

#endif
/* StackTester.cpp defines test-methods for the 
 *  dynamically allocated (array) Stack operations
 * Joel Adams, for CS 112 at Calvin College
 * Student Name:Shurjo Maitra
 * Date:3.31.16
 */

#include "StackTester.h"
#include "Stack.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
#include <stdexcept>
using namespace std;

void StackTester::runTests() {
	cout << "Testing Stack class..." << endl;
//	testConstructor();
//	testIsEmpty();
//	testPushAndIsFull();
//	testGetTop();
//	testPop();
//	testCopyConstructor();
//	testAssignment();
//	testDestructor();
	testgetCapacity();
	testsetCapacity();
	testgetSize();
	cout << "All tests passed!" << endl;
}
//
//void StackTester::testConstructor() {
//	cout << "- Testing constructor... " << flush;
//	// invalid parameter
//	try {
//		Stack<double> s1(0);
//		cerr << "\nConstructed stack of size 0\n";
//		exit(1);
//	} catch (StackException& se) {
//		cout << se << flush;
//	}
//	cout << " 1 " << flush;
//	// valid parameter
//	Stack<double> s2(3);
//	cout << " 2 " << flush;
//	cout << " Passed!" << endl;
//}
//
//void StackTester::testIsEmpty() {
//	cout << "- Testing isEmpty()... " << flush;
//	// capacity 1
//	Stack<double> s1(1);
//	assert( s1.isEmpty() );
//	cout << " 1 " << flush;
//	// capacity > 1
//	Stack<double> s2(3);
//	assert( s2.isEmpty() );
//	cout << " 2 " << flush;
//	cout << " Passed!" << endl;
//}
//
//
//void StackTester::testPushAndIsFull() {
//	cout << "- Testing push()... " << flush;
//	// test with capacity 1
//	Stack<double> s1(1);
//	s1.push(11);
//	assert( !s1.isEmpty() );
//	assert( s1.isFull() );
//	try {
//		s1.push(22);
//		cerr << "\npush() worked on a full stack (size 1)\n";
//		exit(1);
//	} catch (StackException& se) {
//		cout << " 1 " << flush;
//	}
//	// test with capacity > 1
//	Stack<double> s2(3);
//	s2.push(11);
//	s2.push(22);
//	s2.push(33);
//	try {
//		s2.push(44);
//		cerr << "\npush() worked on a full stack (size 3)\n";
//		exit(1);
//	} catch (StackException& se) {
//		cout << " 2 " << flush;
//	}
//	cout << " Passed! " << endl;
//}
//
//void StackTester::testGetTop() {
//	cout << "- Testing getTop()... " << flush;
//	// test with empty stack
//	Stack<double> s1(1);
//	try {
//		s1.getTop();
//		cerr << "\ngetTop() worked on empty stack\n";
//		exit(1);
//	} catch (StackException& se) {
//		cout << se << endl;
// 		cout << " 1 " << flush;
//	}
//	// test with capacity 1
//	Stack<double> s2(1);
//	s2.push(11);
//	assert( s2.getTop() == 11 );
//	cout << " 2 " << flush;
//	// test with capacity > 1
//	Stack<double> s3(3);
//	s3.push(11);
//	assert( s3.getTop() == 11 );
//	s3.push(22);
//	assert( s3.getTop() == 22 );
//	s3.push(33);
//	assert( s3.getTop() == 33 );
//	cout << " 3 " << flush;
//	cout << " Passed! " << endl;
//}
//
//void StackTester::testPop() {
//	cout << "- Testing pop()... " << flush;
//	// try empty, capacity 1
//	Stack<double> s1(1);
//	assert( s1.isEmpty() );
//	try {
//		s1.pop();
//		cerr << "\npop() worked on empty stack (size 1)\n";
//		exit(1);
//	} catch (StackException& se) {
//		cout << " 1 " << flush;
//	}
//	 //try empty, capacity > 1
//	Stack<double> s2(3);
//	try {
//		s2.pop();
//		cerr << "\npop() worked on empty stack (size 3)\n";
//		exit(1);
//	} catch (StackException& se) {
//		cout << " 2 " << flush;
//	}
//	// try non-empty, capacity 1
//	Stack<double> s3(1);
//	s3.push(11);
//	assert( s3.getTop() == 11 );
//	assert( s3.pop() == 11 );
//	try {
//		s3.pop();
//		cerr << "\ns3.pop() worked on empty stack (size 1)\n";
//		exit(1);
//	} catch (StackException& se) {
//		cout << " 3 " << flush;
//	}
//	 //try non-empty, capacity > 1
//	Stack<double> s4(3);
//	s4.push(11);
//	s4.push(22);
//	s4.push(33);
//	assert( s4.getTop() == 33 );
//	assert( s4.pop() == 33 );
//	assert( s4.getTop() == 22 );
//	assert( s4.pop() == 22 );
//	assert( s4.getTop() == 11 );
//	assert( s4.pop() == 11 );
//	try {
//		s4.pop();
//		cerr << "\ns4.pop() worked on empty stack (size 3)\n";
//		exit(1);
//	} catch (StackException& se) {
//		cout << " 4 " << flush;
//	}
//	cout << " Passed!" << endl;
//}
//
//void StackTester::testCopyConstructor() {
//	cout << "- Testing copy constructor... " << flush;
//	// minimal empty Stack
//	Stack<double> s1(1);
//	Stack<double> s2(s1);
//	assert( s2.isEmpty() );
//	assert( s2.myArray != NULL );
//	assert( s2.myCapacity == 1 );
//	assert( s2.myArray != s1.myArray );
//	cout << " 1 " << flush;
//	// minimal non-empty Stack
//	Stack<double> s3(1);
//	s3.push(11);
//	Stack<double> s4(s3);
//	assert( !s4.isEmpty() );
//	assert( s4.isFull() );
//	assert( s4.getTop() == 11 );
//	assert( s4.myArray != s3.myArray );
//	cout << " 2 " << flush;
//	// non-minimal, non-empty stack
//	Stack<double> s5(3);
//	s5.push(11);
//	s5.push(22);
//	s5.push(33);
//	Stack<double> s6(s5);
//	assert( s6.myCapacity = s5.myCapacity );
//	assert( s6.myTop == s5.myTop );
//	assert( s6.myArray != s5.myArray );
//	assert( s6.pop() == 33 );
//	assert( s6.pop() == 22 );
//	assert( s6.pop() == 11 );
//	assert( s5.getTop() == 33 );
//	cout << " 3 " << flush;
//	cout << "Passed!" << endl;
//}
//
//void StackTester::testAssignment() {
//	cout << "- Testing assignment... " << flush;
//	// minimal empty Stacks, same size
//	Stack<double> s1(1);
//	Stack<double> s2(1);
//	s2 = s1;
//	assert( s2.isEmpty() );
//	assert( s2.myArray != NULL );
//	assert( s2.myArray != s1.myArray );
//	assert( s2.myCapacity == 1 );
//	cout << " 1 " << flush;
//	// minimal non-empty Stack to empty Stack, same capacity
//	Stack<double> s3(1);
//	s3.push(11);
//	Stack<double> s4(1);
//	s4 = s3;
//	assert( !s4.isEmpty() );
//	assert( s4.isFull() );
//	assert( s4.getTop() == 11 );
//	assert( s4.myArray != s3.myArray );
//	cout << " 2 " << flush;
//	// minimal empty stack to non-empty stack, same capacity
//	Stack<double> s5(1);
//	Stack<double> s6(1);
//	s6.push(11);
//	s6 = s5;
//	assert( s6.isEmpty() );
//	assert( s6.myArray != NULL );
//	assert( s6.myArray != s5.myArray );
//	assert( s6.myCapacity == 1 );
//	cout << " 3 " << flush;
//	// non-minimal non-empty stack to empty stack, different capacities
//	Stack<double> s7(3);
//	s7.push(11);
//	s7.push(22);
//	s7.push(33);
//	Stack<double> s8(2);
//	s8 = s7;
//	assert( s8.myArray != s7.myArray );
//	assert( s8.myCapacity = s7.myCapacity );
//	assert( s8.myTop == s7.myTop );
//	assert( s8.pop() == 33 );
//	assert( s8.pop() == 22 );
//	assert( s8.pop() == 11 );
//	assert( s7.getTop() == 33 );
//	cout << " 4 " << flush;
//	// non-minimal, empty stack to non-empty stack, different capacities
//	Stack<double> s9(2);
//	Stack<double> s10(3);
//	s10.push(11);
//	s10.push(22);
//	s10.push(33);
//	s10 = s9;
//	assert( s10.isEmpty() );
//	assert( s10.myArray != s9.myArray );
//	assert( s10.myCapacity == s10.myCapacity );
//	cout << " 5 " << flush;
//	// self-assignment, minimal size
//	Stack<double> s11(1);
//	s11.push(11);
//	s11 = s11;
//	assert( s11.isFull() );
//	assert( !s11.isEmpty() );
//	cout << " 6 " << flush;
//	// chaining
//	Stack<double> s12(2);
//	s12.push(11);
//	s12.push(22);
//	Stack<double> s13(1);
//	Stack<double> s14(1);
//	s14 = s13 = s12;
//	assert( s14.isFull() );
//	assert( s14.myArray != s13.myArray );
//	assert( s14.myArray != s12.myArray );
//	assert( s14.pop() == 22 );
//	assert( s14.pop() == 11 );
//	assert( s14.isEmpty() );
//	cout << " 7 " << flush;
//      // self-assignment, non-minimal size
//      s13 = s13;
//	assert( !s13.isEmpty() );
//	assert( s13.isFull() );
//	assert( s13.pop() == 22 );
//	assert( s13.pop() == 11 );
//	assert( s13.isEmpty() );
//	cout << " 8 " << flush;
//	cout << "Passed!" << endl;
//}
//
//void StackTester::testDestructor() {
//	cout << "- Testing destructor..." << flush;
//	// minimal, empty
//	Stack<double> s1(1);
//	s1.~Stack();
//	assert( s1.isEmpty() );
//	assert( s1.myArray == NULL );
//	assert( s1.myCapacity == 0 );
//	cout << " 1 " << flush;
//	// minimal, non-empty
//	Stack<double> s2(1);
//	s2.push(11);
//	s2.~Stack();
//	assert( s2.isEmpty() );
//	assert( s2.myArray == NULL );
//	assert( s2.myCapacity == 0 );
//	cout << " 2 " << flush;
//	// non-minimal, empty
//	Stack<double> s3(3);
//	s3.~Stack();
//	assert( s3.isEmpty() );
//	assert( s3.myArray == NULL );
//	assert( s3.myCapacity == 0 );
//	cout << " 3 " << flush;
//	// non-minimal, non-empty
//	Stack<double> s4(3);
//	s4.push(11);
//	s4.push(22);
//	s4.push(33);
//	s4.~Stack();
//	assert( s4.isEmpty() );
//	assert( s4.myArray == NULL );
//	assert( s4.myCapacity == 0 );
//	cout << " 4 " << flush;
//	cout << " Passed!" << endl;
//}


void StackTester::testgetSize() {
	cout << "- Testing getSize()..." << flush;
	// test with capacity 1
	Stack<double> s1(1);
	s1.push(11);
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	assert( s1.getSize() == 1);
	cout << " 1 " << flush;
	// test with capacity > 1
	Stack<double> s2(3);
	s2.push(11);
	s2.push(22);
	s2.push(33);
	assert( s2.getSize() == 3);
	cout << " 2 " << flush;
	// another test with capacity > 1
	Stack<double> s3(4);
	s3.push(-1);
	s3.push(11);
	s3.push(22);
	assert ( s3.getSize() == 3);
	cout << " 3 " << flush;
	cout << " Passed! " << endl;
}


void StackTester::testgetCapacity() {
	cout << "- Testing getCapacity()..." << flush;
	// test with capacity 1
	Stack<double> s1(1);
	s1.push(11);
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	assert( s1.getCapacity() == 1);
	cout << " 1 " << flush;
	// test with capacity > 1
	Stack<double> s2(3);
	s2.push(11);
	s2.push(22);
	s2.push(33);
	assert( s2.getCapacity() == 3);
	cout << " 2 " << flush;
	// another test with capacity > 1
	Stack<double> s3(4);
	s3.push(-1);
	s3.push(11);
	s3.push(22);
	s3.push(100);
	assert ( s3.getCapacity() == 4);
	cout << " 3 " << flush;
	cout << " Passed! " << endl;
}


void StackTester::testsetCapacity() {
	cout << "- Testing setCapacity()..." << flush;
	// try empty, setcapacity 0
	Stack<double> s0(1);
	s0.push(11);
	try {
		s0.setCapacity(0);
		cerr << "\nsetCapacity() worked on stack with size 1\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 0 " << flush;
	}
	Stack<double> s1(4);
	s1.push(11);
	s1.push(22);
	s1.push(33);
	assert( s1.getCapacity() == 4 );
	assert( s1.getSize() == 3);
	s1.setCapacity(3);
	assert( s1.getCapacity() == 3);
	assert( s1.getSize() == 3);
	cout << " 1 " << flush;
	try {
		s1.setCapacity(1);
		cerr << "\nsetCapacity() worked on stack with greater size\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 2 " << flush;
	}
	cout << " Passed! " << endl;
}
/* StackTester.h declares a test-class for a dynamically allocated (array) Stack.
 * Joel Adams, for CS 112 at Calvin College
 * Student Name:Shurjo Maitra
 * Date:3.31.16
 */

#ifndef STACKTESTER_H_
#define STACKTESTER_H_


class StackTester {
public:
	void runTests();
	void testConstructor();
	void testIsEmpty();
	void testPushAndIsFull();
	void testGetTop();
	void testPop();
	void testCopyConstructor();
	void testAssignment();
	void testDestructor();
	void testgetSize();
	void testgetCapacity();
	void testsetCapacity();
};

#endif /*STACKTESTER_H_*/

/* tester.cpp is a "driver" to run the tests in the StackTester class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:Shurjo Maitra
 * Date:3.31.16
 */


#include "StackTester.h"
#include "ReversePoem.h"
#include "ReversePoemTester.h"
#include <iostream>
using namespace std;

int main() {
		StackTester st;
		st.runTests();
		ReversePoemTester rPt;
		rPt.runTests();
   cout << "\nEnter the name of the poem file: ";
   string poemFile;
   cin >> poemFile;

   ReversePoem reversePoem(poemFile);
   cout << reversePoem.getTitle() << "\n"
        << reversePoem.getAuthor() << "\n"
        << "\n*** Top-To-Bottom ***\n\n"
        << reversePoem.getBody()
        << "\n\n*** Bottom-To-Top ***\n\n"
        << reversePoem.getBodyReversed()
        << endl;
}
sm47@boole:~/workspace/cs112/proj7$ cd Debug
sm47@boole:~/workspace/cs112/proj7/Debug$ ls
makefile    ReversePoem.d	 ReversePoemTester.o  Stack.o	     subdir.mk
objects.mk  ReversePoem.o	 sources.mk	      StackTester.d  tester.d
proj7	    ReversePoemTester.d  Stack.d	      StackTester.o  tester.o
sm47@boole:~/workspace/cs112/proj7/Debug$ make all
make: Nothing to be done for `all'.
sm47@boole:~/workspace/cs112/proj7/Debug$ cd ..
sm47@boole:~/workspace/cs112/proj7$ ./Debug/proj7
Testing Stack class...
- Testing getCapacity()... 1  2  3  Passed! 
- Testing setCapacity()... 0  1  2  Passed! 
- Testing getSize()... 1  2  3  Passed! 
All tests passed!
Testing ReversePoem class...
- Testing empty constructor()...  0  1  Passed!
- Testing File constructor()...  0  1  2  Passed!
- Testing getTitle constructor()...  0  1  2  Passed!
- Testing getBody constructor()...  0  1  2  Passed!
- Testing getBodyReversed constructor()...  0  1  2  3a  3b  Passed!

Enter the name of the poem file: cats.txt
Cats
Leo J. Smada

*** Top-To-Bottom ***

I love it when cats rub against me.
I could never say
I hate those purring felines.


*** Bottom-To-Top ***

I hate those purring felines.
I could never say
I love it when cats rub against me.

sm47@boole:~/workspace/cs112/proj7$ anorexia.txt
anorexia.txt: command not found
sm47@boole:~/workspace/cs112/proj7$ ./Debug/proj7
Testing Stack class...
- Testing getCapacity()... 1  2  3  Passed! 
- Testing setCapacity()... 0  1  2  Passed! 
- Testing getSize()... 1  2  3  Passed! 
All tests passed!
Testing ReversePoem class...
- Testing empty constructor()...  0  1  Passed!
- Testing File constructor()...  0  1  2  Passed!
- Testing getTitle constructor()...  0  1  2  Passed!
- Testing getBody constructor()...  0  1  2  Passed!
- Testing getBodyReversed constructor()...  0  1  2  3a  3b  Passed!

Enter the name of the poem file: anorexia.txt
Anorexia
Anonymous

*** Top-To-Bottom ***

I hate the girl in the mirror
so you'll never hear me say that
I'm good enough
I know in my heart that
the number on the scale defines my worth
and that
being thin will make me happy
I refuse to believe that there is hope
I'm ashamed of my body
No longer can I say
I am worth fighting for.


*** Bottom-To-Top ***

I am worth fighting for.
No longer can I say
I'm ashamed of my body
I refuse to believe that there is hope
being thin will make me happy
and that
the number on the scale defines my worth
I know in my heart that
I'm good enough
so you'll never hear me say that
I hate the girl in the mirror

sm47@boole:~/workspace/cs112/proj7$ exit

Script done on Tue 05 Apr 2016 10:29:53 PM EDT
