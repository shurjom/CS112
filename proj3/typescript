Script started on Mon 29 Feb 2016 03:49:10 PM EST
sm47@wilkes:~/workspace/cs112/proj3$ ls
application.cpp  tester.cpp  Vec.h	       vecTest1.txt	 VecTester.cpp
application.h	 typescript  vecStreamOut.txt  vecTest2Copy.txt  VecTester.h
Debug		 Vec.cpp     vecTest1Copy.txt  vecTest2.txt
sm47@wilkes:~/workspace/cs112/proj3$ cat application  .cpp application.h tester.cp p typ   Vec.cpp Vec.h Vecte  TEster     ester.cpp Vect Tester.h
/* application for displaying vectors
 * Student: Aaron Santucci & Shurjo Maitra
 * Date: Feb 25, 2016
 * project 3 for CS 112 at Calvin College
 */

#include "application.h"
#include "Vec.h"

/*class constructor for application
 * initializes vector variables (myPos and myVec)
 */
application::application() {
	dimIn();
	myPos = Vec(myDim);
	myVec = Vec(myDim);
	getVec();
	display();
}

/*display() pools together functions to display the
 * menus and receive input from the user
 */
void application::display() {
	cout << endl;
	unsigned q = 0;
	while (q != 3) {
		cout << "Dimensions: " << myDim << endl;;
		cout << endl;
		displayMenu();
		cin >> q;
		if (q == 1)
			updatePos();
		else if (q == 2)
			displayPos();
		else
			cout << "Please enter a valid option!" << endl;
	}
	cout << "...Quitting..." << endl;
}

/*displayMenu() prints out the main menu for the
 * application
 */
void application::displayMenu() {
	cout << "Vector Application Program!" << endl <<
			"1. Add to vector" << endl <<
			"2. Output Position" << endl <<
			"3. Quit" << endl;
}

/* updates the position (sum of vectors entered)
 * using Vec +operator
 */
void application::updatePos() {
	Vec temp(myVec);
	cout << "Input new vector; " << myDim << " dimensions needed: " << endl;
	for (unsigned i=0; i < myDim; i++) {
		cout << "Index " << i << ": ";
		cin >> myVec[i];
	}
	myPos = myVec + temp;
}

//Print the position of the vector myPos
void application::displayPos() {
	cout << "Postion: ";
	for (unsigned i=0; i < myDim; i++)
		cout << myPos[i] << " ";
	cout << endl;
}

//dimIn retrieve the number of dimensions from the user
void application::dimIn() {
	cout << "Input number of dimensions for vector: ";
	cin >> myDim;
}

/*getVec prompts and receives input from the user at the
 * start of the application in order to get a starting position
 */
void application::getVec() {
	cout << "Input starting position; " << myDim << " dimensions needed: " << endl;
	for (unsigned i=0; i < myDim; i++){
		cout << "Index " << i << ": ";
		cin >> myVec[i];
	}
	myPos = myVec;
}

application::~application() {
	// TODO Auto-generated destructor stub
}

/* application for displaying vectors
 * Student: Aaron Santucci & Shurjo Maitra
 * Date: Feb 25, 2016
 * project 3 for CS 112 at Calvin College
 */
#ifndef APPLICATION_H_
#define APPLICATION_H_

#include <iostream>
#include "Vec.h"

using namespace std;

class application {
public:
	application();
	application(const application& origional);

	void display();
	void displayMenu();
	void updatePos();
	void displayPos();
	void dimIn();
	void getVec();
	virtual ~application();

private:
	unsigned myDim;
	Vec myPos;
	Vec myVec;
};

#endif /* APPLICATION_H_ */
/* tester.cpp drives the testing of our Vec class.
 * Student: Aaron Santucci & Shurjo Maitra
 * Date: Feb 23, 2016
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"

int main() {
	VecTester vt;
	vt.runTests();
}
/* Vec.cpp defines the methods for Vec, a simple vector class.
 * Student: Aaron Santucci & Shurjo Maitra
 * Date: Feb 23, 2016
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "Vec.h"


//lab03 Vec class default constructor
Vec::Vec() {
	mySize = 0;
	myArray = NULL;
}

//lab03 Vec class explicit constructor
Vec::Vec(unsigned size) {
	mySize = size;
	myArray = new Item[mySize];
	for (unsigned i = 0; i < mySize; i++)
		myArray[i] = 0;
}

//lab03 Vec class copy constructor
Vec::Vec(const Vec& original) {
	mySize = original.mySize;
	if (original.mySize > 0) {
		myArray  = new Item [mySize];
		for (unsigned i = 0; i < mySize; i++)
			myArray[i] = original.myArray[i];
	}
	else
		myArray = NULL;
}

//lab03 Vec class deconstructor
Vec::~Vec() {
	delete [] myArray;
	myArray = NULL;
	mySize = 0;
}

//lab03 Vec class assignment operator
Vec& Vec::operator=(const Vec& original) {
	if (myArray != original.myArray) {
		if (mySize > 0) {
			delete [] myArray;
			myArray = NULL;
		}
		if (original.mySize > 0)
			myArray = new Item [original.mySize];
		mySize = original.mySize;
	}
	for (unsigned i = 0; i < mySize; i++)
		myArray[i] = original.myArray[i];
    return *this;
}

//lab03 return mySize
unsigned Vec::getSize() const {
	return mySize;
   }

//lab03 set value to 'it' at 'index'
void Vec::setItem(unsigned index, const Item& it) {
	if (index >= mySize)
		throw range_error ("Index out of range");
	else
		myArray[index] = it;
   }

//lab03 get value of item at 'index'
Item Vec::getItem(unsigned index) const {
	if (index >= mySize)
			throw range_error ("Index out of range");
	else
		return myArray[index];
  }

//lab03 set a Vec class's size
void Vec::setSize(unsigned newSize) {
	if (newSize == 0) {
		delete [] myArray;
		myArray = NULL;
		mySize = 0;
	}
	else if (mySize == newSize)
		mySize = newSize;
	else {
		Item * newArray = new Item[newSize];
		if (mySize < newSize){
			for (unsigned i = 0; i < mySize; i++)
				newArray[i] = myArray[i];
			for (unsigned i = mySize; i < newSize; i++)	// TODO Auto-generated constructor stub

				newArray[i] = 0;
		}
		else {
			for (unsigned i = 0; i < newSize; i++)
				newArray[i] = myArray[i];
		}
		mySize = newSize;
		delete [] myArray;
		myArray = newArray;
	}
   }

//lab03 test for equality b/t left operend and v2
bool Vec::operator==(const Vec& v2) {
	if (mySize == v2.mySize) {
		for (unsigned i = 0; i < mySize; i++)
			if (myArray[i] != v2.myArray[i])
				return false;
		return true;
	}
	return false;
 }

//lab03 ostream output to file
void Vec::writeTo(ostream& out) const {
	for (unsigned i; i < mySize; i++)
		out << myArray[i] << endl;
   }

//lab03 istream read from file into array
void Vec::readFrom(istream& in) {
	for (unsigned i= 0; i < mySize; i++)
		in >> myArray[i];
   }

/* Subscript to retrieve value method
 * @index: an unsigned int that must not be out
 * 			of range for myArray
 * Return: myArray[index]
 */
Item& Vec::operator[] (unsigned index) {
	if (index >= mySize) {
		throw out_of_range ("Invalid Subscript.");
	}
	else {
		return myArray[index];
	}
}

/* Subscript to retrieve value method for constant
 * 		reference values
 * @index: an unsigned int that must not be out
 * 			of range for myArray
 * Return: myArray[index]
 */
Item& Vec::operator[] (unsigned index) const {
	if (index >= mySize) {
		throw out_of_range ("Invalid Subscript.");
	}
	else {
		return myArray[index];
	}
}

/*Inequality operator != checks if myArray and v2.myArray
 * 		are NOT equal
 * @param: v2, a Vec class object
 * Return: true/false
 */
bool Vec::operator !=(const Vec& v2) {
	if (mySize != v2.mySize) {
		return true;
	}
	for (unsigned i = 0; i < mySize; i++) {
		if (myArray[i] != v2.myArray[i]) {
			return true;
		}
	}
	return false;
}

/* Vec readFrom reads values from a filename directly
 * 		into myArray; the first values read in the
 * 		file will be mySize
 * @filename: a string object, will be used as
 * 		the file read from
 */
void Vec::readFrom(string fileName) {
	ifstream fin(fileName.c_str());
	fin >> mySize;
	myArray = new Item[mySize];
	for (unsigned i = 0; i <= mySize; i++) {
		fin >> myArray[i];
	}
	fin.close();
}

/* Vec writeTo writes values to of myArray into
 * 		a file filename; the first values read in the
 * 		file will be mySize
 * @filename: a string object, will be used as
 * 		the file written to
 */
void Vec::writeTo(string fileName) {
	ofstream fout(fileName.c_str());
	assert(fout.is_open());
	fout << mySize << '\n';
	for (unsigned i = 0; i < mySize; i++) {
		fout << myArray[i] << '\n';
	}
	fout.close();
}

/*Vector addition operator adds two vectors and sets a third
 * 		vector as equal to them
 *@param: v2, a Vec class object
 *Return: v3, a Vec class object equal to myArray + v2.myArray
 */
Vec Vec::operator+(const Vec& v2) {
	Vec v3(mySize);
	if (mySize != v2.mySize) {
		throw invalid_argument("Invalid Argument.");
	} else if (v2.mySize == 0) {
		return v3;
	}
	for (unsigned i = 0; i < mySize; i++) {
		v3.myArray[i] = myArray[i] + v2.myArray[i];
	}
	return v3;
}

/*Vector subtraction operator subtracts two vectors and sets a third
 * 		vector as equal to them
 *@param: v2, a Vec class object
 *Return: v3, a Vec class object equal to the values in
 *		myArray minus the values in v2.myArray
 */
Vec Vec::operator-(const Vec& v2) {
	Vec v3(mySize);
	if (mySize != v2.mySize) {
		throw invalid_argument("Invalid Argument!");
	} else if (v2.mySize == 0) {
		return v3;
	}
	for (unsigned i = 0; i < mySize; i++) {
		v3.myArray[i] = myArray[i] - v2.myArray[i];
	}
	return v3;
}

/*Vector dot operator multiplies two vectors and sets a third
 * 		vector as equal to them
 *@param: v2, a Vec class object
 *Return: v3, a Vec class object equal to the values in
 *		myArray * the values in v2.myArray
 */
double Vec::operator*(const Vec& v2) {
	Vec v3(mySize);
	double dProd = 0;
	if (mySize != v2.mySize) {
		throw invalid_argument("Invalid Argument.");
		}
		else if (v2.mySize == 0) {
		return 0;
		}
		for (unsigned i = 0; i < mySize; i++) {
		v3.myArray[i] = myArray[i] * v2.myArray[i];
		}
	for (unsigned i = 0; i < mySize; i++) {
		dProd = dProd + v3.myArray[i];
	}
	return dProd;
}

/* Vec.h provides a simple vector class named Vec.
 * Student: Aaron Santucci & Shurjo Maitra
 * Date: Feb 23, 2016
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
#include <cstdlib>
#include <stdexcept>
#include <fstream>
#include <ostream>
#include <cassert>
using namespace std;

typedef double Item;

class Vec {
public:
	Vec();
	virtual ~Vec();
	Vec(unsigned size);
	Vec(const Vec& original);
	Vec& operator = (const Vec& original);
	unsigned getSize() const;
	void setItem(unsigned index, const Item& it);
	Item getItem(unsigned index) const;
	void setSize(unsigned newSize);
	bool operator == (const Vec& v2);
	void writeTo(ostream& out) const;
	void readFrom(istream& in);
	Item& operator [] (unsigned index);
	Item& operator [] (unsigned index) const;
	bool operator != (const Vec& v2);
	void readFrom(string fileName);
	void writeTo(string fileName);
	Vec operator + (const Vec& v2);
	Vec operator - (const Vec& v2);
	double operator * (const Vec& v2);

private:
	unsigned mySize;
	Item * myArray;
	friend class VecTester;
	friend class application;
};

#endif /*VEC_H_*/
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student: Aaron Santucci & Shurjo Maitra
 * Date: Feb 23, 2016
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();

	testApplication();
	cout << "All tests passed!" << endl;
}

//project 3 application test
void VecTester::testApplication() const {
	application appTest;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	assert( v1.myArray != saveAddress );
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	assert( v2.myArray != saveAddress );
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	assert( v3.myArray == saveAddress );
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}


void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
	// write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
              fin >> value;
              assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
	// get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec v(size);
	// test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
	fin.close();
      cout << "Passed!" << endl;
}

void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");
	assert( v1.getSize() == 3 );
	assert( v1.myArray != NULL );
	assert( v1.getItem(0) == 1 );
	assert( v1.getItem(1) == 2 );
	assert( v1.getItem(2) == 3 );
	cout << " 1 " << flush;

	Vec v2(5);
	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert( v2.getSize() == 4 );
	cout << " 2 " << flush;
	assert( v2.myArray != NULL );
	assert( v2.getItem(0) == 2 );
	assert( v2.getItem(1) == 4 );
	assert( v2.getItem(2) == 6 );
	assert( v2.getItem(3) == 8 );
       /* the last assertion assumes that the new array's base
        *  address is different from the old array's base address,
        *  which may not be true. If your method seems to be right,
        *  is correctly using delete to deallocate the old array,
        *  and passes all assertions except this one, you may
        *  comment out this assertion.
        */
	assert( v2.myArray != oldAddr );
	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}

void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}

/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student: Aaron Santucci & Shurjo Maitra
 * Date: Feb 23, 2016
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"
#include "application.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
	// application for project 3
	void testApplication() const;
};

#endif /*VECTESTER_H_*/
sm47@wilkes:~/workspace/cs112/proj3$ cde    Debug
sm47@wilkes:~/workspace/cs112/proj3/Debug$ ls
application.d  makefile    proj3   sources.mk  tester.d  Vec.d	VecTester.d
application.o  objects.mk  proj3_  subdir.mk   tester.o  Vec.o	VecTester.o
sm47@wilkes:~/workspace/cs112/proj3/Debug$ make all
make: Nothing to be done for `all'.
sm47@wilkes:~/workspace/cs112/proj3/Debug$ cd ..
sm47@wilkes:~/workspace/cs112/proj3$ .De  /Debug/proj1 1 3
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
Input number of dimensions for vector: 3
Input starting position; 3 dimensions needed: 
Index 0: 1
Index 1: 2
Index 2: 3

Dimensions: 3

Vector Application Program!
1. Add to vector
2. Output Position
3. Quit
2
Postion: 1 2 3 
Dimensions: 3

Vector Application Program!
1. Add to vector
2. Output Position
3. Quit
1
Input new vector; 3 dimensions needed: 
Index 0: 1
Index 1: 2
Index 2: 3
Dimensions: 3

Vector Application Program!
1. Add to vector
2. Output Position
3. Quit
2
Postion: 2 4 6 
Dimensions: 3

Vector Application Program!
1. Add to vector
2. Output Position
3. Quit
3
Please enter a valid option!
...Quitting...
All tests passed!
sm47@wilkes:~/workspace/cs112/proj3$ exit

Script done on Mon 29 Feb 2016 03:51:36 PM EST
