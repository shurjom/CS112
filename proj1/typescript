Script started on Tue 23 Feb 2016 07:59:07 PM EST
sm47@thompson:~/workspace/cs112/proj1$ ls
commands.txt  PlayList.h	   PlayListTester.h  SongTester.h
Debug	      PlayListManager.cpp  Song.cpp	     testSongOutput.txt
main.cpp      PlayListManager.h    Song.h	     testSongs.txt
PlayList.cpp  PlayListTester.cpp   SongTester.cpp    typescript
sm47@thompson:~/workspace/cs112/proj1$ cat main.cpp PlayList.cpp PlayList.h Play ListManager.cpp PlayListManager.h PlayListTester.cpp PlayListTester.h Song.cpp S ong.h SongTester.cpp SongTester.h
///* main.cpp tests the classes in our project.
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */
//
//#include "SongTester.h"
//#include "PlayListTester.h"
//
//int main() {
//	SongTester sTester;
//	sTester.runTests();
//	PlayListTester plTester;
//}
/* PlayList.cpp defines the PlayList methods.
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */
#include "PlayList.h"
#include <fstream>      // ifstream
#include <cassert>      // assert()
#include <vector>
using namespace std;
/* PlayList constructor
 * @param: fileName, a string
 * Precondition: fileName contains the name of a playlist file.
 */
PlayList::PlayList(const string& fileName) {
	// open a stream to the playlist file
	ifstream fin(fileName.c_str());
	assert(fin.is_open());

	// read each song and append it to mySongs
	Song s;
	while (true) {
		s.readFrom(fin);
		if (!fin) {
			break;
		}
		string separator;
		getline(fin, separator);
		mySongs.push_back(s);
	}

	// close the stream
	fin.close();
}

/* Retrieve length of the playList
 * Return: the number of songs in the playList.
 */
unsigned PlayList::getNumSongs() const {
	return mySongs.size();
}

vector<Song> PlayList::searchByArtist(const string& directorName) const {
	/* searchByArtist() searches the PlayList for Songs by a given artist.
	    *
	    * @param: artistName, a string containing the artist's name (or a part of it)
	    * @return: a vector containing all Songs in the PlayList
	    *           for whom artist is a substring of myArtist.
	    */
   vector<Song> v;
   for (unsigned i = 0; i < mySongs.size(); i++) {
      if ( mySongs[i].getArtist().find(directorName) != string::npos ) {
         v.push_back( mySongs[i] );
      }
   }
   return v;
}

vector<Song> PlayList::searchByYear(int year) const {
	/* searchByYear() searches the PlayList for Songs by a given year.
	    *
	    * @param: year, a integer containing the song year
	    * @return: a vector containing all songs in the playList
	    *           for whom year is a substring of myYear.
	    */
	vector<Song> v;
	for (unsigned i = 0; i < mySongs.size(); i++){
		if ( mySongs[i].getYear() == year ) {
			v.push_back( mySongs[i] );
		}
	}
	return v;
}

vector<Song> PlayList::searchByTitlePhrase(const string& phrase) const {
	vector<Song> v;
	/* searchByTitlePhrase() searches the PlayList for Songs by a given title phrase.
	    *
	    * @param: phrase, a string within a title of the song
	    * @return: a vector containing all Songs in the playList
	    *           for whom title phrase is a substring of myTitle.
	    */
	 for (unsigned i = 0; i < mySongs.size(); i++) {
	      if ( mySongs[i].getTitle().find(phrase) != string::npos ) {
	         v.push_back( mySongs[i] );
	      }
	   }
	   return v;
	}

void PlayList::addSong(const Song& newSong) {
	/* addSong() adds a new song in the playList for Songs by asking for user input.
	    *
	    * @param: newSong, a string containing a separate Song object created through user input.
	    * @return: this does not return anything but appends the newSong class in the memory.
	    */
		mySongs.push_back( newSong );
}

void PlayList::removeSong(const Song& aSong) {
	//	/* removeSong() removes a song from the PlayList of movies through user input information.
	//	    *
	//	    * @param: aSong, a string containing an already Song object found through user input information.
	//	    * @return: this does not return a vector my removes a Song object from the PlayList of movies.
	//	    */
		vector<Song>::iterator i = mySongs.begin();
		while ( i != mySongs.end()) {
			if ( i -> getTitle() == aSong.getTitle()) {
				i = mySongs.erase(i);
			}
			else {
				++i;
			}
		}
}

void PlayList::save() const {
	/* save() saves and writes the Song object created through user input (newSong) into the PlayList for Songs.
	    *
	    * @param: this method has no parameters
	    * @return: this method does not return but writes the appended Songs objected into the testSongs.txt file.
	    */
	ofstream fout("testSongs.txt");
	for (unsigned i = 0; i < mySongs.size(); i++) {
		mySongs[i].writeTo (fout);
		fout << '\n';
	}
	fout.close();
}
/* PlayList.h declares class PlayList.
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */

#ifndef PLAYLIST_H_
#define PLAYLIST_H_

#include "Song.h"
#include <vector>
#include <string>
using namespace std;

class PlayList {
public:
	PlayList(const string& fileName);
	unsigned getNumSongs() const;
	vector<Song> searchByArtist(const string& artist) const;
	vector<Song> searchByYear(const int year) const;
	vector<Song> searchByTitlePhrase(const string& phrase) const;
	void addSong(const Song& newSong);
	void removeSong(const Song& newSong);
	void save() const;
private:
	vector<Song> mySongs;
};

#endif /*PLAYLIST_H_*/
/* tester.cpp tests the classes in our project.
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */

#include "SongTester.h"
#include "PlayListTester.h"
#include "PlayList.h"
#include "Song.h"
#include <iostream>
using namespace std;

// main function that creates the options for the user to interact with a PlayList
int main() {
    SongTester mt;
    mt.runTests();
    PlayListTester ct;
    ct.runTests();
    PlayList sc("testSongs.txt");
    while ( not 0 ) {
    	cout << "Welcome to the PlayList Manager!"<< "\n" << endl;
    	cout << "Please enter: " << endl;
    	cout << "1 - to search the PlayList for songs by a given artist" << endl;
    	cout << "2 - to search the PlayList for songs from a given year" << endl;
    	cout << "3 - to search the PlayList for songs with a given phrase in their title" << endl;
    	cout << "4 - to add a new song to the PlayList" << endl;
    	cout << "5 - to remove a song to the PlayList" << endl;
    	cout << "0 - to quit" << endl;
    	int choice;
    	cin >> choice;
    	if(choice == 1) {
    		string artist;
    		cout << "Please enter name of artist: " << endl;
    		cin >> artist;
    		vector<Song> v1 = sc.searchByArtist(artist);
    		for(unsigned i = 0; i < v1.size(); i++) {
    		cout << v1[i].getTitle() << '\n' << v1[i].getYear() << '\n' << endl;
    		}
    	} else if(choice == 2) {
    		int year;
    		cout << "Please enter the year: " << endl;
    		cin >> year;
    		vector<Song> v1 = sc.searchByYear(year);
    		for(unsigned i = 0; i < v1.size(); i++) {
    		cout << v1[i].getTitle() << '\n' << v1[i].getArtist()<< '\n' << endl;
    		}
    	} else if(choice == 3){
    		string phrase;
    		cout << "Please enter a phrase from the title of the Song: " << endl;
    		cin >> phrase;
    		vector<Song> v1 = sc.searchByTitlePhrase(phrase);
    		for(unsigned i = 0; i < v1.size(); i++) {
    		cout << v1[i].getTitle() << '\n' << v1[i].getYear()<< '\n' << endl;
    		}
    	} else if (choice == 4){
    		string title;
    		int year;
    		string artist;
    		cin.ignore(256, '\n');
    		cout << "Please enter title: " << endl;
    		cin >> title;
    		cout << "Please enter year: " << endl;
    		cin.ignore(256, '\n');
    		cin >> year;
    		cout << "Please enter name of the artist: " << endl;
    		cin >> artist;
    		cin.ignore(256, '\n');
    		sc.addSong(Song(title, artist, year));
    		int save;
    		cout << "Do you want to Save? Enter 9." << endl;
    		cin >> save;
    		if (save == 9) {
    			sc.save();
    			cout << "saved" << endl;
    		}
    	} else if (choice == 5) {
    		string title;
    		int year;
    		string artist;
    		cout << "Please enter title to remove: "<< endl;
    		cin.ignore(256, '\n');
    		cin >> title;
    		cout << "Please enter year to remove: " << endl;
    		cin.ignore(256, '\n');
    		cin >> year;
    		cout << "Please enter artist to remove: "<< endl;
    		cin.ignore(256, '\n');
    		sc.removeSong(Song(title, artist, year));
    		int save;
    		cout << "Do you want to Save? Enter 9." << endl;
    		cin >> save;
    		if (save == 9) {
    			sc.save();
    			cout << "saved" << endl;
    		}
    	} else if (choice == 0) {
    		cout << "End" << endl;
    		break;
    	}

    }
}



/*
 * PlayListManager.h
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */
#ifndef PLAYLISTMANAGER_H_
#define PLAYLISTMANAGER_H_

#include "SongTester.h"
#include "PlayListTester.h"
#include "PlayList.h"
#include "Song.h"
#include <iostream>
using namespace std;



#endif /* PLAYLISTMANAGER_H_ */
/* PlayListTester.cpp defines the PlayList test-methods.
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */

#include "PlayListTester.h"
#include <iostream>
#include "PlayList.h"
#include <cassert>
using namespace std;


//Tester for runTests method
void PlayListTester::runTests() {
	cout << "\nTesting class PlayList..." << endl;
	testConstructors();
	testSearchByArtist();
	testSearchByYear();
	testSearchByTitlePhrase();
	testaddSongandremoveSong();
	testSave();
	cout << "All tests passed!" << endl;
}

//Tester for test constructors method
void PlayListTester::testConstructors() {
	cout << "- constructors..." << flush;
	PlayList pList("testSongs.txt");
	assert(pList.getNumSongs() == 4);
	cout << " 0 " << flush;

	cout << " Passed!" << endl;
}

//Tester for searching by artist in playList
void PlayListTester::testSearchByArtist() {
	cout << "- searchByArtist()... " << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByArtist("Cream");
	assert(searchResult.size() == 0);
	cout << " 0 " << flush;

	// case of 1
	searchResult = pList.searchByArtist("Baez");
	assert(searchResult.size() == 1);
	assert(searchResult[0].getTitle() == "Let It Be");
	cout << " 1 " << flush;

	// case of 2
	searchResult = pList.searchByArtist("Beatles");
	assert(searchResult.size() == 2);
	assert(searchResult[0].getTitle() == "Let It Be");
	assert(searchResult[1].getTitle() == "Penny Lane");
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
}

//Tester for searching by year
void PlayListTester::testSearchByYear() {
	cout << "- searchByYear()... " << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByYear(2012);
	assert(searchResult.size() == 1);
	cout << " 0 " << flush;

	// case of 1
	searchResult = pList.searchByYear(1971);
	assert(searchResult.size() == 1);
	assert(searchResult[0].getTitle() == "Let It Be");
	cout << " 1 " << flush;

	// case of 2
	searchResult = pList.searchByYear(1967);
	assert(searchResult.size() == 2);
	assert(searchResult[0].getTitle() == "Let It Be");
	assert(searchResult[1].getTitle() == "Penny Lane");
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
}

//Tester for searching by title method
void PlayListTester::testSearchByTitlePhrase() {
	cout << "- searchByTitlePhrase()... " << flush;
	// load a PlayList with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByTitlePhrase("Cream");
	assert(searchResult.size() == 0);
	cout << " 0 " << flush;

	// case of 1
	searchResult = pList.searchByTitlePhrase("Let");
	assert(searchResult.size() == 2);
	assert(searchResult[0].getTitle() == "Let It Be");
	cout << " 1 " << flush;

	// case of 2
	searchResult = pList.searchByTitlePhrase("Penny");
	assert(searchResult.size() == 1);
	assert(searchResult[0].getTitle() == "Penny Lane");
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

//Tester for adding and removing song method
void PlayListTester::testaddSongandremoveSong() {
	cout << "- addSong()... " << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	//add a song and check
	Song newSong("One", "Metallica", 1969);
	assert(newSong.getTitle() == "One");
	cout << " 0 " << flush;

	pList.addSong(newSong);
	vector<Song> searchResult = pList.searchByArtist("Metallica");
	assert(searchResult[0].getTitle() == "One");
	cout << " 1 " << flush;

	Song toremove("One", "Metallica", 1969);
	pList.removeSong(toremove);
	cout << " 2 " << flush;

	vector<Song> searchResult2 = pList.searchByArtist("Metallica");
	assert(searchResult2.size() == 0);
	cout << " 3 " << flush;

	cout << "Passed!" << endl;

}

//Tester for save method
void PlayListTester::testSave() const {
	cout << "- Save()..." << flush;

	// load a playlist that is to be changed
	PlayList pList("testSongs.txt");

	//add a song to cause a change in the original playList
	Song s1("One", "Metallica", 1948);
	pList.addSong(s1);

	// write the modified playList back into the original file
	pList.save();
	cout << " 0 " << flush;

	// load the saved file under a new playList name and test for the added song
	PlayList pList2("testSongs.txt");
	vector<Song> searchResult = pList2.searchByArtist("Metallica");
	assert(searchResult.size() == 1);
	cout << " 1 " << flush;

	//return the playList to its original
	pList.removeSong(s1);
	pList.save();
	cout << " 2 " << flush;

	// check that the song has been removed
	vector<Song> searchResult2 = pList2.searchByArtist("Metallica");
	assert(searchResult2.size() == 1);
	cout << " 3 " << flush;
	cout << " Passed!" << endl;

}
/* PlayListTester.h tests the PlayList class.
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */

#ifndef PLAYLISTTESTER_
#define PLAYLISTTESTER_

class PlayListTester {
public:
	void runTests();
	void testConstructors();
	void testSearchByArtist();
	void testSearchByYear();
	void testSearchByTitlePhrase();
	void testaddSongandremoveSong();
	void testSave() const;
};

#endif /*PLAYLISTTESTER_*/
/* Song.cpp defines the methods for class Song (see Song.h).
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */

#include "Song.h"
#include <cstdlib>
#include <fstream>

/* Song default constructor
 * Postcondition: myTitle and myArtist are empty strings
 *            && myYear == 0.
 */
Song::Song() {
	myTitle = myArtist = "";
	myYear = 0;
}

/* getter method for myTitle
 * Return: myTitle
 */
string Song::getTitle() const {
	return myTitle;
}

/* getter method for myArtist
 * Return: myArtist
 */
string Song::getArtist() const {
	return myArtist;
}

/* getter method for myYear
 * Return: myYear
 */
unsigned Song::getYear() const {
	return myYear;
}

/* Explicit constructor
 * @param: title, a string
 * @param: artist, a string
 * @year: an unsigned int.
 * Postcondition: myTitle == title &&
 *                myArtist == artist &&
 *                myYear == year.
 */
Song::Song(const string& title, const string& artist, unsigned year) {
	myTitle = title;
	myArtist = artist;
	myYear = year;
}

/* Song input method...
 * @param: in, an istream
 * Precondition: in contains the title, artist, and year data for a Song.
 * Postcondition: the title, artist, and year data have been read from in &&
 *                 myTitle == title &&
 *                 myArtist == artist &&
 *                 myYear == year.
 */
void Song::readFrom(istream& in) {
	getline(in, myTitle);
	getline(in, myArtist);
	string yearString;
	getline(in, yearString);
	myYear = atoi(yearString.c_str());
}

/* Song output...
 * @param: out, an ostream
 * Postcondition: out contains myTitle, a newline,
 *                             myArtist, a newline,
 *                             myYear, and a newline.
 */
void Song::writeTo(ostream& out) const {
	out << myTitle << '\n'
	    << myArtist << '\n'
	    << myYear  << '\n';
}
/* Operator
 * @param: song1, song2
 * Postcondition: out contains operator method.
 */
bool Song::operator==(const Song& Song2) const {
	if (myTitle != Song2.getTitle()){
		return false;
	}
	else if(myYear != Song2.getYear()){
		return false;
	}
	else if(myArtist != Song2.getArtist()) {
		return false;
	}
	else {
		return true;
	}
}


/* Song.h declares a class for storing song information.
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */

#ifndef SONG_H
#define SONG_H

#include <string>
using namespace std;

class Song {
public:
	Song();
	Song(const string& title, const string& artist, unsigned year);
	void readFrom(istream& in);
	void writeTo(ostream& out) const;
	string getTitle() const;
	string getArtist() const;
	unsigned getYear() const;
	bool operator==(const Song& song2) const;
private:
	string myTitle;
	string myArtist;
	unsigned myYear;
};

#endif /*SONG_H_*/
/* SongTester.cpp defines the test-methods for class SongTester.
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */

#include "SongTester.h"
#include <iostream>
#include <cassert>
#include "Song.h"
#include <fstream>
using namespace std;

void SongTester::runTests() {
	cout << "Testing class Song..." << endl;
	testConstructors();
	testReadFrom();
	testWriteTo();
	testOperator();
	cout << "All tests passed!" << endl;
}

void SongTester::testConstructors() {
	cout << "- constructors ... " << flush;
	// default constructor
	Song s;
	assert(s.getTitle() == "");
	assert(s.getArtist() == "");
	assert(s.getYear() == 0);
	cout << " 0 " << flush;
	// explicit constructor
	Song s1("Badge", "Cream", 1969);
	assert(s1.getTitle() == "Badge");
	assert(s1.getArtist() == "Cream");
	assert(s1.getYear() == 1969);
	cout << " 1 " << flush;

	cout << " Passed!" << endl;
}

void SongTester::testReadFrom() {
	cout << "- readFrom()... " << flush;
	ifstream fin("testSongs.txt");
	assert(fin.is_open());
	Song s;

	// read first song in test playlist
	s.readFrom(fin);
	assert(s.getTitle() == "Call Me Maybe");
	assert(s.getArtist() == "Carly Rae Jepsen");
	assert(s.getYear() == 2012);
	cout << " 0 " << flush;
	string separator;
	getline(fin, separator);

	// read second song in test playlist
	s.readFrom(fin);
	assert(s.getTitle() == "Let It Be");
	assert(s.getArtist() == "The Beatles");
	assert(s.getYear() == 1967);
	cout << " 1 " << flush;
	getline(fin, separator);

	// read third song in test playlist
	s.readFrom(fin);
	assert(s.getTitle() == "Let It Be");
	assert(s.getArtist() == "Joan Baez");
	assert(s.getYear() == 1971);
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

void SongTester::testWriteTo() {
	cout << "- writeTo()... " << flush;

	// declare three songs
	Song s1("Badge", "Cream", 1969);
	Song s2("Godzilla", "Blue Oyster Cult", 1977);
	Song s3("Behind Blue Eyes", "The Who", 1971);

	// write the three songs to an output file
	ofstream fout("../testSongOutput.txt");
	assert(fout.is_open());
	s1.writeTo(fout);
	s2.writeTo(fout);
	s3.writeTo(fout);
	fout.close();

	// use readFrom() to see if writeTo() worked
	ifstream fin("../testSongOutput.txt");
	assert(fin.is_open());
	Song s4, s5, s6;

	// read and check the first song
	s4.readFrom(fin);
	assert(s4.getTitle() == "Badge");
	assert(s4.getArtist() == "Cream");
	assert(s4.getYear() == 1969);
	cout << " 0 " << flush;

	// read and check the second song
	s5.readFrom(fin);
	assert(s5.getTitle() == "Godzilla");
	assert(s5.getArtist() == "Blue Oyster Cult");
	assert(s5.getYear() == 1977);
	cout << " 1 " << flush;

	// read and check the third song
	s6.readFrom(fin);
	assert(s6.getTitle() == "Behind Blue Eyes");
	assert(s6.getArtist() == "The Who");
	assert(s6.getYear() == 1971);
	cout << " 2 " << flush;

	fin.close();
	cout << " Passed!" << endl;
}

void SongTester::testOperator() {
	cout << "- operator()... " << flush;

	// declare three songs
	Song s1("One", "Metallica", 1969);
	Song s2("Bat Country", "Avenged Sevenfold", 1977);
	Song s3("Sunburn", "Muse", 1971);
	assert(s1.getTitle() == "One");
	assert(s2.getTitle() == "Bat Country");
	assert(s3.getTitle() == "Sunburn");

	//if the 1st and 2nd same
	if (s1.operator== (s2) == true) {
		cout << "1st and 2nd songs are same" << endl;
	} else {
		cout << "1st and 2nd songs are different" << endl;
	}
	cout << " 0 " << flush;

	//if the 2nd and 3rd songs are same
	if (s2.operator == (s3) == true) {
		cout << "2nd and 3rd songs are same" << endl;
	} else {
		cout << "2nd and 3rd songs are different" << endl;
	}
	cout << " 1 " << flush;

	cout << " Passed!" << endl;
}
/* SongTester.h declares a test-class for class Song.
// * Student Name: Shurjo Maitra
// * Date: 2.15.16
// * Begun by: Joel Adams, for CS 112 at Calvin College.
// */

#ifndef SONGTESTER_H_
#define SONGTESTER_H_

class SongTester {
public:
	void runTests();
	void testConstructors();
	void testReadFrom();
	void testWriteTo();
	void testOperator();
};

#endif /*SONGTESTER_H_*/
sm47@thompson:~/workspace/cs112/proj1$ cd  cd Debug
sm47@thompson:~/workspace/cs112/proj1/Debug$ ls
main.d	    PlayList.d	       PlayListTester.d  Song.d        sources.mk
main.o	    PlayListManager.d  PlayListTester.o  Song.o        subdir.mk
makefile    PlayListManager.o  proj1		 SongTester.d
objects.mk  PlayList.o	       project1		 SongTester.o
sm47@thompson:~/workspace/cs112/proj1/Debug$ make all
make: Nothing to be done for `all'.
sm47@thompson:~/workspace/cs112/proj1/Debug$ cd ..
sm47@thompson:~/workspace/cs112/proj1$ ./Debug/proj1
Testing class Song...
- constructors ...  0  1  Passed!
- readFrom()...  0  1  2 Passed!
- writeTo()...  0  1  2  Passed!
- operator()... 1st and 2nd songs are different
 0 2nd and 3rd songs are different
 1  Passed!
All tests passed!

Testing class PlayList...
- constructors... 0  Passed!
- searchByArtist()...  0  1  2  Passed!
- searchByYear()...  0  1  2  Passed!
- searchByTitlePhrase()...  0  1  2  Passed!
- addSong()...  0  1  2  3 Passed!
- Save()... 0  1  2  3  Passed!
All tests passed!
Welcome to the PlayList Manager!

Please enter: 
1 - to search the PlayList for songs by a given artist
2 - to search the PlayList for songs from a given year
3 - to search the PlayList for songs with a given phrase in their title
4 - to add a new song to the PlayList
5 - to remove a song to the PlayList
0 - to quit
1
Please enter name of artist: 
Metallica
Welcome to the PlayList Manager!

Please enter: 
1 - to search the PlayList for songs by a given artist
2 - to search the PlayList for songs from a given year
3 - to search the PlayList for songs with a given phrase in their title
4 - to add a new song to the PlayList
5 - to remove a song to the PlayList
0 - to quit
4
Please enter title: 
One
Please enter year: 
1989
Please enter name of the artist: 
Metallica
Do you want to Save? Enter 9.
9
saved
Welcome to the PlayList Manager!

Please enter: 
1 - to search the PlayList for songs by a given artist
2 - to search the PlayList for songs from a given year
3 - to search the PlayList for songs with a given phrase in their title
4 - to add a new song to the PlayList
5 - to remove a song to the PlayList
0 - to quit
1
Please enter name of artist: 
Metallica
One
1989

Welcome to the PlayList Manager!

Please enter: 
1 - to search the PlayList for songs by a given artist
2 - to search the PlayList for songs from a given year
3 - to search the PlayList for songs with a given phrase in their title
4 - to add a new song to the PlayList
5 - to remove a song to the PlayList
0 - to quit
2
Please enter the year: 
1989    1967
Let It Be
The Beatles

Penny Lane
The Beatles

Welcome to the PlayList Manager!

Please enter: 
1 - to search the PlayList for songs by a given artist
2 - to search the PlayList for songs from a given year
3 - to search the PlayList for songs with a given phrase in their title
4 - to add a new song to the PlayList
5 - to remove a song to the PlayList
0 - to quit
3
Please enter a phrase from the title of the Song: 
Let
Let It Be
1967

Let It Be
1971

Welcome to the PlayList Manager!

Please enter: 
1 - to search the PlayList for songs by a given artist
2 - to search the PlayList for songs from a given year
3 - to search the PlayList for songs with a given phrase in their title
4 - to add a new song to the PlayList
5 - to remove a song to the PlayList
0 - to quit
5
Please enter title to remove: 
One
Please enter year to remove: 
1989
Please enter artist to remove: 
Do you want to Save? Enter 9.
9
saved
Welcome to the PlayList Manager!

Please enter: 
1 - to search the PlayList for songs by a given artist
2 - to search the PlayList for songs from a given year
3 - to search the PlayList for songs with a given phrase in their title
4 - to add a new song to the PlayList
5 - to remove a song to the PlayList
0 - to quit
1
Please enter name of artist: 
Metallica
Welcome to the PlayList Manager!

Please enter: 
1 - to search the PlayList for songs by a given artist
2 - to search the PlayList for songs from a given year
3 - to search the PlayList for songs with a given phrase in their title
4 - to add a new song to the PlayList
5 - to remove a song to the PlayList
0 - to quit
0
End
sm47@thompson:~/workspace/cs112/proj1$ exit

Script done on Tue 23 Feb 2016 08:01:36 PM EST
